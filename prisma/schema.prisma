datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Task {
    task_id      Int       @id @default(autoincrement())
    title        String
    description  String?
    comments     String?
    category     String?
    due_date     DateTime?
    start_date   DateTime?
    duration     Float?
    priority     String?
    status       String
    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt
    parentTaskId Int?
    projectId    String?
    project      Project?  @relation(fields: [projectId], references: [id])

    parentTask Task?  @relation("ParentChildren", fields: [parentTaskId], references: [task_id])
    subTasks   Task[] @relation("ParentChildren")

    tags Task_Tags[]

    userId String?

    User User? @relation(fields: [userId], references: [id])

    dependencies   Task_Dependencies[] @relation(name: "dependencies")
    dependentTasks Task_Dependencies[] @relation("TaskDependencies")

    @@index([parentTaskId])
    @@index([projectId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    gh_username   String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    workspaces    Workspace[]
    Task          Task[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task_Dependencies {
    task_dependency_id Int @id @default(autoincrement())

    task_id Int
    task    Task @relation("TaskDependencies", fields: [task_id], references: [task_id])

    dependent_on_task_id Int
    dependentTask        Task @relation(name: "dependencies", fields: [dependent_on_task_id], references: [task_id])

    @@unique([task_id, dependent_on_task_id])
    @@index([dependent_on_task_id])
}

model Task_Tags {
    task_tag_id Int    @id @default(autoincrement())
    task_id     Int
    tag         String
    task        Task   @relation(fields: [task_id], references: [task_id])

    @@unique([task_id, tag])
    @@index([task_id])
}

model Project {
    id          String     @id @default(cuid())
    name        String
    description String?
    created_at  DateTime   @default(now())
    updated_at  DateTime   @updatedAt
    userId      String
    user        User       @relation(fields: [userId], references: [id])
    tasks       Task[]
    workspaceId String?
    workspace   Workspace? @relation(fields: [workspaceId], references: [id])

    @@index([userId])
    @@index([workspaceId])
}

model Workspace {
    id          String    @id @default(cuid())
    name        String
    description String?
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    projects    Project[]

    @@index([userId])
}
